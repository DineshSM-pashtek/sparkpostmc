
<!DOCTYPE html>
<html>
<head>
  <script src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
  <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
  <link
  rel="stylesheet"
  href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
  integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
  crossorigin="anonymous"
/>

<!-- Icon -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" type="text/css" href="/css/hearsay.css" />  

</head>
  <body>
    <div  class='row'>
      <div class='col-md-2'></div>
      <div class='col-md-8' id="mydiv"></div>
      <div class='col-md-2'></div>
    </div>

    <script type="text/babel">
        function AddLogorow(abcd, second){
          return (
                <div class="e1logorowpadding">
                    <div><img src='https://github.com/Sivaskandharuban/authmcdataext/blob/master/views/hearsay.png?raw=true' width='50' height='50' /><label class='e1pageheader'>Hearsay Systems - Organization Preferences</label></div>
                </div>);
        }

        function AddTextLabels(){
            return (
                <span class="checkmark">
                    <div class="checkmark_circle"></div>
                    <div class="checkmark_stem"></div>
                    <div class="checkmark_kick"></div>
                </span>
            );
        }

        function SecondPageHeader(){
            return (
                <div class="row epaddingbottom10">
                    <div class="col-md-11 elRowPg1">
                        <label class='e1labelheaderPage1'>Create Data Template</label>
                    </div>
                    <div class="col-md-1"></div>
                </div>

            );
        }

        function checkAndAddCustomOption(customUniqueoption){
          if(customUniqueoption!="" && customUniqueoption!=" " && customUniqueoption!=null){
            return (
              <option value="customUniqueoption">{customUniqueoption}</option>
            ) 
          } else{
            return (
              ""
            ) 
          }
          
        }

        function SecondPageDropdownControl(controlname,controlvalue,handler, customoption){
           if(controlname=="blank"){
                return "";
            }
            else
            {
            return (
                <select name={controlname} value={controlvalue} onChange={handler} class='e1inputdd col-md-11'>
                    <option value="">--Select--</option>
                    <option value="birthdate">Birth Date</option>
                    <option value="email">Email</option>
                    <option value="firstname">First Name</option>
                    <option value="lastname">Last Name</option>
                    <option value="phone">Phone</option>
                    <option value="preferredname">Preferred Name</option>
                    <option value="title">Title</option>
                    {checkAndAddCustomOption(customoption)}
                </select>
            );
            }

        }



        function SecondPageTemplateNameControl(controlname,controlvalue,handler){
            return (
                <input class='e1inputpg2' placeholder='Enter Template name'  name={controlname} value={controlvalue} onChange={handler} type="text" maxlength="30" />
            );
        }

        function AddPage2Row(control1name, control1value, handler,label1name , divcssclass, rowpos,label2name,control2name,control2value, customuniqueid){

        let sPageHeader="";
        let scontrol1 = "";
        let scontrol2 = "";
        
        if(rowpos==1){
            sPageHeader=SecondPageHeader();
            scontrol1 = SecondPageTemplateNameControl(control1name,control1value,handler);
        }
        else
        {
            scontrol1 = SecondPageDropdownControl(control1name,control1value,handler, customuniqueid);
        }

        scontrol2=SecondPageDropdownControl(control2name,control2value,handler, customuniqueid);
        return (

            <div>
                {sPageHeader}
                <div class="row epaddingbottom10 e1marginleft">
                    <div class="col-md-1 ">
                        <label class='e1labelheaderPage2'>{label1name}</label>
                    </div>
                    <div class="col-md-4 ">
                        {scontrol1}
                    </div>
                    <div class="col-md-1 ">
                        <label class='e1labelheaderPage2'>{label2name}</label>
                    </div>
                    <div class="col-md-4 ">
                        {scontrol2}
                    </div>
                </div>
            </div>
            )
        }

        function AddBackButton(page, btnclick, btnclass){
          if(page>1){
            return (
                <button onClick={btnclick} class={btnclass}>Back</button>
            );
          } else{
            return (
                ""
            );
          }
        }


        function AddButtonBlock(cancelclick, nextclick, nextbtntext,btnclass,backclick, pageno){
          return (
            <div class='e1container'>
                <div  class='row'>
                    <div class='col-md-2 pull-left'><button onClick={cancelclick} class='btn btn-link e1cancelbuton float-left'>Cancel</button></div>
                    <div class='col-md-7' id="mydiv"></div>
                    <div class='col-md-3'>
                        <button onClick={nextclick} class={btnclass}>{nextbtntext}</button>
                        {AddBackButton(pageno, backclick, btnclass)}
                    </div>
                </div>
            </div>
          );
        }

		
		

		
        function AddNewBlock(controlname, controlvalue, handler,labelname , divcssclass){
          //let templabelname=labelname;
          //templabelname=AddTextLabels();

          return (
            <div class={divcssclass}>
                <div class='col-md-1 elRowPg1'><label class='e1labelheaderPage1'>{labelname}</label></div>
                <div class='col-md-10'>
                    <select name={controlname} value={controlvalue} onChange={handler} class='e1inputdd'>
                        <option value="">--Select--</option>
                        <option value="birthdate">Birth Date</option>
                        <option value="email">Email</option>
                        <option value="firstname">First Name</option>
                        <option value="lastname">Last Name</option>
                        <option value="phone">Phone</option>
                        <option value="preferredname">Preferred Name</option>
                        <option value="title">Title</option>
                    </select>
                </div>
                <div class='col-md-1'></div>
            </div>
          )
        }




        function AddCustomFieldBlock(fieldLabelControlName, typeControllnName, lengthControlName, btnName, 
                fieldLabelControlValue, typeControlValue, lengthControlValue, handler , 
				FieldObjectHandler , divcssclass, noOfField, leninputdisabled){
          return (

        <div class={divcssclass}>
            <div class="col-md-1">
                <label class="e1labelheaderPage1">{noOfField}</label>
            </div>
            <div class="col-md-1">
                <label class="e1labelheaderPage1">Field</label>
            </div>
            <div class="col-md-3">
                <input class='e1input3' name={fieldLabelControlName} value={fieldLabelControlValue} onChange={handler} type="text" maxlength="30" />
            </div>
            <div class="col-md-1">
                <label class="e1labelheaderPage1">Type</label>
            </div>
            <div class="col-md-2">
                <select class="e1inputddsmall" name={typeControllnName} value={typeControlValue} onChange={handler}>
                    <option value="0" selected>--Select--</option>
                    <option value="1">Boolean</option>
                    <option value="2">Date</option>
                    <option value="3">Decimal</option>
                    <option value="4">Email Address</option>
                    <option value="5">Locale</option>
                    <option value="6">Number</option>
                    <option value="7">Phone</option>
                    <option value="8">Text</option>
                </select>
            </div>
            <div class="col-md-1">
                <label class="e1labelheaderPage1">Size</label>
            </div>
            <div class="col-md-2">
                <input class="e1input120" name={lengthControlName} value={lengthControlValue} type="text" onChange={handler} maxlength="5"/>
            </div>
            <div class="col-md-1">
                <button name={btnName} onClick={FieldObjectHandler} class="btn btn-primary btn-xs e1buttonleftpadding">Save</button>
            </div>


        </div>
          )
        }
        

        function AddDigitInCircle(number){
        return (
          <span class="Roundedbadge" aria-hidden="true">{number}</span>
        );
      }

        function generateWizardStep(firstDivCover, firstDiv, secondDiv, thirdDivCover, thirdDiv, title, size, isStanby, stepNum){
          if(isStanby==true){
            return (
            <div class={"div"} >
              <div class={firstDivCover}><div class={firstDiv}></div></div>
              <div class={secondDiv} style={{width:size}}><label class="lblWizardHeading" ><i class="fa fa-check-circle" aria-hidden="true"></i> {title}</label></div>
              <div class={thirdDivCover}><div class={thirdDiv}></div></div>  
            </div>
          );
          } else{
            return (
            <div class={"div"} >
              <div class={firstDivCover}><div class={firstDiv}></div></div>
              <div class={secondDiv} style={{width:size}}><label class="lblWizardHeading"><span class="badge">{stepNum}</span> {title}</label></div>
              <div class={thirdDivCover}><div class={thirdDiv}></div></div>  
            </div>
          );
          }
        }


        function wizardNavigation(step){
          const triangle_right_inverted_cover_first="triangle-right-inverted-cover-first ";
          const triangle_right_inverted_cover_first_unselected="triangle-right-inverted-cover-first-unselected ";
          const triangle_right_inverted_cover="triangle-right-inverted-cover ";
          const triangle_right_inverted_first_unselected="triangle-right-inverted-first-unselected ";
          const triangle_right_inverted="triangle-right-inverted ";
          const triangle_right_inverted_unselected="triangle-right-inverted-unselected ";
          const triangle_right_unselected="triangle-right-unselected ";
          const triangle_right_cover_last="triangle-right-cover-last";
          const triangle_right="triangle-right ";
          const triangle_right_inverted_cover_unselected="triangle-right-inverted-cover-unselected ";
          const triangle_right_unselected_cover="triangle-right-unselected-cover";
          const triangle_right_unselected_cover_last="triangle-right-unselected-cover-last";
          const triangle_right_cover="triangle-right-cover ";
          const triangle_right_inverted_first="triangle-right-inverted-first ";
          const rectangle_unselected="rectangle-unselected div";
          const rectangle="rectangle div ";
          const lblWizardHeading="lblWizardHeading ";
          const greenBack="greenBack";
          const invertedGreenBack="invertedGreenBack";
          const triangle_right_cover_green="triangle-right-cover-green";
          const triangle_right_inverted_cover_unselected_green="triangle-right-inverted-cover-unselected-green";


          if(step==1){
              return ( 
                  <div class="div divWizardHead"> 
                    <div class="div divStep1">
                    {generateWizardStep(triangle_right_inverted_cover_first_unselected, triangle_right_inverted_first_unselected, rectangle_unselected, triangle_right_unselected_cover, triangle_right_unselected, 'ORG. PREFERENCES', "185px", false, 1)}
                    </div>
                    <div class="div divStep2" >
                      {generateWizardStep(triangle_right_inverted_cover_unselected, triangle_right_inverted_unselected, rectangle_unselected, triangle_right_unselected_cover, triangle_right_unselected, 'DATA CONFIG', "140px", false, 2)}
                    </div>
                    <div class="div divStep3" >
                      {generateWizardStep(triangle_right_inverted_cover_unselected, triangle_right_inverted_unselected, rectangle_unselected, triangle_right_unselected_cover_last, triangle_right_unselected, 'SUMMARY', "120px", false, 3)}
                    </div>
                  </div> 
                 );
          } else if(step==2){
            return ( 
              <div class="div divWizardHead"> 
                    <div class="div divStep1">
                    {generateWizardStep(triangle_right_inverted_cover_first, triangle_right_inverted_first, rectangle, triangle_right_cover, triangle_right, 'ORG. PREFERENCES', "185px", true, 1)}
                    </div>
                    <div class="div divStep2" >
                      {generateWizardStep(triangle_right_inverted_cover_unselected, triangle_right_inverted_unselected, rectangle_unselected, triangle_right_unselected_cover, triangle_right_unselected, 'DATA CONFIG', "140px", false, 2)}
                    </div>
                    <div class="div divStep3" >
                      {generateWizardStep(triangle_right_inverted_cover_unselected, triangle_right_inverted_unselected, rectangle_unselected, triangle_right_unselected_cover_last, triangle_right_unselected, 'SUMMARY', "120px", false, 3)}
                    </div>
                  </div> 
                 );
          } else if(step==3){
            return ( 
              <div class="div divWizardHead"> 
                <div class="div divStep1">
                    {generateWizardStep(triangle_right_inverted_cover_first, triangle_right_inverted_first, rectangle, triangle_right_cover_green, triangle_right, 'ORG. PREFERENCES', "185px", true, 1)}
                    </div>
                    <div class="div divStep2" >
                      {generateWizardStep(triangle_right_inverted_cover_unselected_green, triangle_right , rectangle, triangle_right_cover, triangle_right, 'DATA CONFIG', "140px", true, 2)}
                    </div>
                    <div class="div divStep3" >
                      {generateWizardStep(triangle_right_inverted_cover_unselected, triangle_right_inverted_unselected, rectangle_unselected, triangle_right_unselected_cover_last, triangle_right_unselected, 'SUMMARY', "120px", false, 3)}  
                    </div>
                  </div>
                 );
            }
        }


      // function expandCustomFieldObject(cfo){
      //   if(cfo.length==0){
      //     return (
      //       <div></div>
      //     );
      //   } else {
      //     return ( 
      //           <div>
      //             Field Label : <span>{cfo.FieldName}</span> &nbsp;&nbsp;
      //             Type : <span>{cfo.FieldType}</span> &nbsp;&nbsp;
      //             Length : <span>{cfo.FieldLength}</span> &nbsp;&nbsp;
      //           </div>
      //           );
      //   }
        
      // }

      class HearsayPage1 extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            orgid: '',
            refid: 0,
            customeruniqueid:'',
            reftext: "First",
            page:1,
            templatename: '',
            temp1: '',
            temp2: '',
            temp3: '',
            temp4: '',
            temp5: '',
            temp6: '',
            temp7: '',
            temp8: '',
            temp9: '',
            temp10: '',

            temp1text: '',
            temp2text: '',
            temp3text: '',
            temp4text: '',            
            temp5text: '',            
            temp6text: '',            
            temp7text: '',            
            temp8text: '',            
            temp9text: '',            
            temp10text: '',            

            temp1label: AddDigitInCircle('1'),
            temp2label: AddDigitInCircle('2'),
            temp3label: AddDigitInCircle('3'),
            temp4label: AddDigitInCircle('4'),
            temp5label: AddDigitInCircle('5'),
            temp6label: AddDigitInCircle('6'),
            temp7label: AddDigitInCircle('7'),

            FieldCounter:7,

            //Field5Css:"row epaddingbottom10 ehidediv",
            //Field6Css:"row epaddingbottom10 ehidediv",
            //Field7Css:"row epaddingbottom10 ehidediv",
            Field8Css:"row epaddingbottom10 ehidediv e1marginleft",
            Field9Css:"row epaddingbottom10 ehidediv e1marginleft",
            Field10Css:"row epaddingbottom10 ehidediv e1marginleft",

            artemp8:[],
            artemp9:[],
            artemp10:[],

            temp8FieldLabel:"",
            temp9FieldLabel:"",
            temp10FieldLabel:"",

            temp8DataType:"",
            temp9DataType:"",
            temp10DataType:"",

            temp8Length:"",
            temp9Length:"",
            temp10Length:"",
			
			
			LenthFld8CSS:" true ",
            LenthFld9CSS:" true ",
            LenthFld10CSS:" true ",
            };

            
          this.handleChangeBack = this.handleChangeBack.bind(this);  
          this.handleChangeNext = this.handleChangeNext.bind(this);
          this.handleChangeCancel = this.handleChangeCancel.bind(this);
          this.handleNewFieldClick = this.handleNewFieldClick.bind(this);
        }

        componentDidMount() {

        }

        handleNewFieldClick(event){
          const counter=this.state.FieldCounter+1;
          if(counter>10){
            alert('Maximum limit exceeded (limit: 10)')            
          }
          else{
              const stemp2='row epaddingbottom10 e1marginleft emargintop10';
              if(counter==8){
                this.setState({Field8Css: stemp2});
              }                   
              else if(counter==9){
                this.setState({Field9Css: stemp2});
              }                                                   
              else if(counter==10){
                this.setState({Field10Css: stemp2});
              }                              
              this.setState({FieldCounter: counter});
              }
        }

        handleChangeCancel(event) {
          alert('Cancel button clicked');
        }

        



        handleChangeBack(event){
          let ipage = this.state.page - 1;
		  if(ipage<=0){ipage=1;}
          this.setState({page: ipage});
        }

        handleChangeNext(event) {
          
          if(this.state.page==3){
            var DataConfig={
              dataConfig1:this.state.temp1text,
              dataConfig2:this.state.temp2text,
              dataConfig3:this.state.temp3text,
              dataConfig4:this.state.temp4text,
              dataConfig8:this.state.artemp8,
              dataConfig9:this.state.artemp9,
              dataConfig10:this.state.artemp10
            }
             
            var jsonObject={
              orgId:this.state.orgid,
              refid:this.state.refid,
              dataConfig:DataConfig
            }
             
          }

          //Validation
           
          var ValidationStatus=true;
          var validateMessages=[];

          if(this.state.page==1){
		  
		  
            if(this.state.orgid=="" || this.state.orgid==null || this.state.orgid==" "){
            ValidationStatus=false;
                ReactDOM.render(<p style={{color: "red" }}>Hearsay Org ID is mandatory.</p>, document.getElementById('valMsgOrgId'));
            } else{
                ReactDOM.render(<p> </p>, document.getElementById('valMsgOrgId'));
            }

            if(this.state.refid==0 || this.state.refid=="0"){
              ValidationStatus=false;
              ReactDOM.render(<p style={{color: "red"}}>Reference ID is mandatory.</p>, document.getElementById('valMsgRefId'));
            } else{
              ReactDOM.render(<p></p>, document.getElementById('valMsgRefId'));
            }
            if(this.state.customeruniqueid==0 || this.state.customeruniqueid=="0"){
              ValidationStatus=false;
              ReactDOM.render(<p style={{color: "red"}}>Customer Unique ID is mandatory.</p>, document.getElementById('spncustomeruniqueid'));
            } else{
              ReactDOM.render(<p></p>, document.getElementById('spncustomeruniqueid'));
            }			

			
          } else if(this.state.page==2){


			if(this.state.templatename==""){
              ValidationStatus=false;
              ReactDOM.render(<p style={{color: "red"}}>Template name is mandatory.</p>, document.getElementById('valMsgPageTwo'));
		
			}
            
			

            if(this.state.templatename=="" && this.state.temp1text=="" && this.state.temp2text=="" && 
			    this.state.temp3text=="" && this.state.temp4text=="" && 
				this.state.temp5text=="" && this.state.temp6text=="" && this.state.temp7text==""){
              ValidationStatus=false;
              ReactDOM.render(<p style={{color: "red"}}>Data template fields are mandatory.</p>, document.getElementById('valMsgPageTwo'));
				
				}
            }

          if(ValidationStatus==true){

            
            let ipage = this.state.page + 1;
            if(ipage==4){
              //reset to first page
              ipage=1;
              //reset all values
              this.setState({orgid: ''});
              this.setState({refid: 1});
              this.setState({reftext: 'First'});
              this.setState({temp1: '1'});
              this.setState({temp2: '1'});
              this.setState({temp3: '1'});
              this.setState({temp4: '1'});
              this.setState({temp5: '1'});
              this.setState({templatename: ''});
			  this.setState({customeruniqueid: ''});
			  
			  
			  
        

              this.setState({temp6: '1'});
              this.setState({temp7: '1'});
              this.setState({temp8: '1'});
              this.setState({temp9: '1'});
              this.setState({temp10: '1'});

              this.setState({temp1text: ''});
              this.setState({temp2text: ''});
              this.setState({temp3text: ''});
              this.setState({temp4text: ''});

              this.setState({temp5text: ''});
              this.setState({temp6text: ''});
              this.setState({temp7text: ''});
              this.setState({temp8text: ''});
              this.setState({temp9text: ''});
              this.setState({temp10text: ''});


              this.setState({FieldContent5: ''});
              this.setState({FieldContent6: ''});
              this.setState({FieldContent7: ''});
              this.setState({FieldContent8: ''});
              this.setState({FieldContent9: ''});
              this.setState({FieldContent10: ''});

              this.setState({FieldCounter: 4});

              this.setState({artemp8: []});
              this.setState({artemp9: []});
              this.setState({artemp10: []});
              this.setState({temp8FieldLabel: ''});
              this.setState({temp9FieldLabel: ''});
              this.setState({temp10FieldLabel: ''});
              this.setState({temp8DataType: ''});
              this.setState({temp9DataType: ''});
              this.setState({temp10DataType: ''});
              this.setState({temp8Length: ''});
              this.setState({temp9Length: ''});
              this.setState({temp10Length: ''});
			  
			  
			  this.setState({LenthFld8CSS: ' true '});
			  this.setState({LenthFld9CSS: ' true '});
			  this.setState({LenthFld10CSS: ' true '});

              this.setState({temp1label: AddDigitInCircle('1')});
              this.setState({temp2label: AddDigitInCircle('2')});
              this.setState({temp3label: AddDigitInCircle('3')});
              this.setState({temp4label: AddDigitInCircle('4')});
                this.setState({temp5label: AddDigitInCircle('5')});
                this.setState({temp6label: AddDigitInCircle('6')});
                this.setState({temp7label: AddDigitInCircle('7')});

				this.setState({Field8Css: 'row epaddingbottom10 ehidediv e1marginleft'});
				this.setState({Field9Css: 'row epaddingbottom10 ehidediv e1marginleft'});
				this.setState({Field10Css: 'row epaddingbottom10 ehidediv e1marginleft'});
            }
            this.setState({page: ipage});
          }
        }

        updateCustomFieldObject = (event) => {
          let nam = event.target.name;

         if(nam=="temp8Button"){
            var Object8={
              FieldName:this.state.temp8FieldLabel,
              FieldType:this.state.temp8DataType,
              FieldLength:this.state.temp8Length
            }
            this.setState({artemp8:Object8});

          }else if(nam=="temp9Button"){
            var Object9={
              FieldName:this.state.temp9FieldLabel,
              FieldType:this.state.temp9DataType,
              FieldLength:this.state.temp9Length
            }
            this.setState({artemp9:Object9});

          }else if(nam=="temp10Button"){
            var Object10={
              FieldName:this.state.temp10FieldLabel,
              FieldType:this.state.temp10DataType,
              FieldLength:this.state.temp10Length
            }
            this.setState({artemp10:Object10});

          }

          

        }


        

        myChangeHandler = (event) => {
          let nam = event.target.name;
          let val = event.target.value;

          //alert(nam + '--' + val);
          //alert(this.state.temp5 + '--name: ' + nam + 'value-> ' + val);
          this.setState({[nam]: val});

          if(nam=="orgid"){
                ReactDOM.render(<p></p>, document.getElementById('valMsgOrgId'));
          }
          if(nam=="customeruniqueid"){
		    ReactDOM.render(<p></p>, document.getElementById('spncustomeruniqueid'));
          }

          //stoe the seleted text also in the state variable
          if(nam=='refid' || nam=='temp1' || nam=='temp2' || nam=='temp3' || nam=='temp4' || nam=='temp5' || 
              nam=='temp6' || nam=='temp7' || nam=='temp8' || nam=='temp9' || nam=='temp10'){
            var index = event.nativeEvent.target.selectedIndex;
            let label = event.nativeEvent.target[index].text;
            let stick=AddTextLabels();
            if(nam=='refid'){
              this.setState({reftext: label});
              ReactDOM.render(<p></p>, document.getElementById('valMsgRefId'));
            }
            else if(nam=='temp1'){
              this.setState({temp1text: label});
              if(val==""){this.setState({temp1label: AddDigitInCircle('1')});}else{this.setState({temp1label: stick});}
            }
            else if(nam=='temp2'){
              this.setState({temp2text: label});
              if(val==""){this.setState({temp2label: AddDigitInCircle('2')});}else{this.setState({temp2label: stick});}
            }
            else if(nam=='temp3'){
              this.setState({temp3text: label});
              if(val==""){this.setState({temp3label: AddDigitInCircle('3')});}else{this.setState({temp3label: stick});}
            }
            else if(nam=='temp4'){
              this.setState({temp4text: label});
              this.setState({temp4label: stick});
              if(val==""){this.setState({temp4label: AddDigitInCircle('4')});}else{this.setState({temp4label: stick});}
            }                                    
            else if(nam=='temp5'){
              this.setState({temp5text: label});
                this.setState({temp5label: stick});
                if(val==""){this.setState({temp5label: AddDigitInCircle('5')});}else{this.setState({temp5label: stick});}
            }                                    
            else if(nam=='temp6'){
              this.setState({temp6text: label});
                this.setState({temp6label: stick});
                if(val==""){this.setState({temp6label: AddDigitInCircle('6')});}else{this.setState({temp6label: stick});}
            }                                   
            else if(nam=='temp7'){
              this.setState({temp7text: label});
                this.setState({temp7label: stick});
                if(val==""){this.setState({temp7label: AddDigitInCircle('7')});}else{this.setState({temp7label: stick});}
            }                                   
            else if(nam=='temp8'){
              this.setState({temp8text: label});
            }                                   
            else if(nam=='temp9'){
              this.setState({temp9text: label});
            }                                   
            else if(nam=='temp10'){
              this.setState({temp10text: label});
            }                                                                                               

          }

           
          //Field Label
          if(nam=="temp8FieldLabel" || nam=="temp9FieldLabel" || nam=="temp10FieldLabel"){

            if(nam=="temp8FieldLabel"){
              this.setState({temp8FieldLabel:val});
            }else if(nam=="temp9FieldLabel"){
              this.setState({temp9FieldLabel:val});
            }else if(nam=="temp10FieldLabel"){
              this.setState({temp10FieldLabel:val});
            }
          }

          //Type
          if(nam=="temp8DataType" || nam=="temp9DataType" || nam=="temp10DataType"){
					
		    let csizecss=" false";
			if(val==1 || val==2 || val==0){
			  csizecss="  true ";
			}
            if(nam=="temp8DataType"){
              this.setState({temp8DataType:val});
			  this.setState({LenthFld8CSS:csizecss});
            }else if(nam=="temp9DataType"){
              this.setState({temp9DataType:val});
			  this.setState({LenthFld9CSS:csizecss});
            }else if(nam=="temp10DataType"){
              this.setState({temp10DataType:val});
			  this.setState({LenthFld10CSS:csizecss});
            }
			
			
			
          }


          //Length
          if(nam=="temp8Length" || nam=="temp9Length" || nam=="temp10Length"){
            if(nam=="temp8Length"){
              this.setState({temp8Length:val});
            }else if(nam=="temp9Length"){
              this.setState({temp9Length:val});
            }else if(nam=="temp10Length"){
              this.setState({temp10Length:val});
            }
          }
        }

        render() {
          if(this.state.page==1) {
            return (
              <div>
                  
				{wizardNavigation(1)}
                {AddLogorow()}
                <div class='e1container'>
                    <div class="row epaddingbottom10">
                        <div class="col-md-11 elRowPg1">
                            <label class='e1labelheaderPage1 e1margintop10'>Hearsay Org ID</label>
                            <input name='orgid' value={this.state.orgid} placeholder='Enter Hearsay Organization ID' class='e1inputpg1' maxlength='40' onChange={this.myChangeHandler} />
                            <span id="valMsgOrgId"></span>
                        </div>
                        <div class="col-md-1"></div>
                    </div>
                  
                    <hr class='e1linecolor'/>

                    <div class="row epaddingbottom10">
                        <div class="col-md-11 elRowPg1">
                            <label class='e1labelheaderPage1'>Hearsay User Reference ID</label>
                            <select name='refid' value={this.state.refid} onChange={this.myChangeHandler} class='e1inputpg1'>
                                <option value="0">--Select--</option>
                                <option value="agentid">Agent ID</option>
                                <option value="emailid">Email ID</option>
                            </select>
                            <span id="valMsgRefId"></span>
                        </div>
                        <div class="col-md-1"></div>
                    </div>            
                  <hr class='e1linecolor'/>
                  <div class="row epaddingbottom10">
                        <div class="col-md-11 elRowPg1">
                            <label class='e1labelheaderPage1 e1margintop10'>Customer Unique ID</label>
                            <input name='customeruniqueid' value={this.state.customeruniqueid} placeholder='Enter Customer Unique ID' class='e1inputpg1' maxlength='40' onChange={this.myChangeHandler} />
                            <span id="spncustomeruniqueid"></span>
                        </div>
                        <div class="col-md-1"></div>
                    </div>
                  
                    <hr class='e1linecolor'/>
                </div>
                {AddButtonBlock(this.handleChangeCancel,this.handleChangeNext,'Next','btn btn-primary btn-xs float-right e1buttonleftpadding',this.handleChangeBack, this.state.page)}
              </div>
            )
          }
          else if(this.state.page==2) {
            return (
              <div>
                {wizardNavigation(2)}
                {AddLogorow()}
				        
                <div class='e1container'>

                    
    
                    {AddPage2Row('templatename',this.state.templatename,this.myChangeHandler,'Name','row epaddingbottom10',1,"",'blank',"", "")}
                    {AddPage2Row('temp1',this.state.temp1,this.myChangeHandler,this.state.temp1label,'row epaddingbottom10',2,this.state.temp5label,'temp5',this.state.temp5, this.state.customeruniqueid)}
                    {AddPage2Row('temp2',this.state.temp2,this.myChangeHandler,this.state.temp2label,'row epaddingbottom10',2,this.state.temp6label,'temp6',this.state.temp6, this.state.customeruniqueid)}
                    {AddPage2Row('temp3',this.state.temp3,this.myChangeHandler,this.state.temp3label,'row epaddingbottom10',2,this.state.temp7label,'temp7',this.state.temp7, this.state.customeruniqueid)}
                    {AddPage2Row('temp4',this.state.temp4,this.myChangeHandler,this.state.temp4label,'row epaddingbottom10',2,"",'blank',"", "")}


				  {AddCustomFieldBlock('temp8FieldLabel','temp8DataType','temp8Length','temp8Button' ,this.state.temp8FieldLabel, this.state.temp8DataType, this.state.temp8Length,this.myChangeHandler, this.updateCustomFieldObject,this.state.Field8Css, '8', this.state.LenthFld8CSS)}
				  {AddCustomFieldBlock('temp9FieldLabel','temp9DataType','temp9Length','temp9Button' ,this.state.temp9FieldLabel, this.state.temp9DataType, this.state.temp9Length,this.myChangeHandler, this.updateCustomFieldObject,this.state.Field9Css, '9', this.state.LenthFld9CSS)}
				  {AddCustomFieldBlock('temp10FieldLabel','temp10DataType','temp10Length','temp10Button' ,this.state.temp10FieldLabel, this.state.temp10DataType, this.state.temp10Length,this.myChangeHandler, this.updateCustomFieldObject,this.state.Field10Css, '10', this.state.LenthFld10CSS)}



                  

                  <div class='row epaddingbottom10 e1marginleft'>
                      {/*<div class='col-md-2 elRowPg1'></div>*/}
                      <div class='col-md-11'>
                          <button onClick={this.handleNewFieldClick} class='btn btn-link e1butonfontsize float-left eaddbtnmarginleft emargintop10 btn-xs'> + Add New Field</button>
                      </div>
                        
                      <div class='col-md-1'></div>
                  </div>
                  <div class='row epaddingbottom10'>
                      <div class='col-md-1'></div>
                      <div class='col-md-10'>
                        <span id="valMsgPageTwo"></span>
                      </div>
                      <div class='col-md-1'></div>
                  </div>

                  <hr class='e1linecolor'/>
                </div>
                {AddButtonBlock(this.handleChangeCancel,this.handleChangeNext,'Next','btn btn-primary btn-xs float-right e1buttonleftpadding',this.handleChangeBack, this.state.page)}
              </div>
            )
          }
          else if(this.state.page==3) {
            return (
              <div>
                {wizardNavigation(3)}
                {AddLogorow()}
                <div class='e1container'>
                    <div class="row epaddingbottom10 e1marginleft emargintop10">
                        <div class="col-md-11">
                            <label class='e1labelheaderPage3'>HEARSAY ORG ID</label>
                        </div>
                        <div class="col-md-1"></div>

                    </div>
                    <div class="row epaddingbottom10 e1marginleft">
						<div class="col-md-11 ">
                            <label class=''>{this.state.orgid}</label>
                        </div>
                        <div class="col-md-1"></div>
                    </div>
					
					<div class="row epaddingbottom10 e1marginleft emargintop24">
                        <div class="col-md-11">
                            <label class='e1labelheaderPage3'>HEARSAY USER REFERENCE ID</label>
                        </div>
                        <div class="col-md-1"></div>

                    </div>
                    <div class="row epaddingbottom10 e1marginleft">
						<div class="col-md-11 ">
                            <label class=''>{this.state.reftext}</label>
                        </div>
                        <div class="col-md-1"></div>
                    </div>
                    <div class="row epaddingbottom10 e1marginleft emargintop24">
                        <div class="col-md-11">
                            <label class='e1labelheaderPage3'>Customer Unique ID</label>
                        </div>
                        <div class="col-md-1"></div>

                    </div>
                    <div class="row epaddingbottom10 e1marginleft">
						<div class="col-md-11 ">
                            <label class=''>{this.state.customeruniqueid}</label>
                        </div>
                        <div class="col-md-1"></div>
                    </div>
					<div class="row epaddingbottom10 e1marginleft emargintop24">
                        <div class="col-md-11">
                            <label class='e1labelheaderPage3'>DATA EXTENSION TEMPLATES (NEW)</label>
                        </div>
                        <div class="col-md-1"></div>

                    </div>
                    <div class="row epaddingbottom10 e1marginleft">
						<div class="col-md-11 ">
						
								<div>{this.state.templatename} </div>
								<div>{this.state.temp1text} </div>
								<div>{this.state.temp2text} </div>
								<div>{this.state.temp3text} </div>
								<div>{this.state.temp4text} </div>
								<div>{this.state.temp5text} </div>
								<div>{this.state.temp6text} </div>
								<div>{this.state.temp7text} </div>
								<div>{this.state.temp8FieldLabel}  </div>
								<div>{this.state.temp9FieldLabel}</div>
								<div>{this.state.temp10FieldLabel}</div>
                        </div>
                        <div class="col-md-1"></div>
                    </div>
                </div>
                {AddButtonBlock(this.handleChangeCancel,this.handleChangeNext,'Done','btn btn-primary btn-xs float-right e1buttonleftpadding',this.handleChangeBack, this.state.page)}
              </div>
            )
          }          
        }
      }

      ReactDOM.render(<HearsayPage1 />, document.getElementById('mydiv'))
    </script>
  </body>
</html>
